openapi: 3.0.0
info:
  version: 1.0.0
  title: Fashion Project API
  description: API to manage stocks with articles associated to categories by Juanny MIENAHATA & Lina BELAKHDAR
servers:
  - url: http://localhost:3002
    description: Local Server
tags:
  - name: category
    description: Operations about categories
  - name: article
    description: Operations about articles
  - name: stock
    description: Access to stock
paths:
  /category:
    get:
      tags:
        - category
      description: Get all categories from the database
      parameters:
        - name: index
          in: query
          description: Index of the first category to return
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Maximum number of categories to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Error fetching category
        '500':
          description: Internal server error
    post:
      tags:
        - category
      description: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: category1FE3434a
        required: true
      responses:
        '201':
          description: Success
        '400':
          description: Error creating category
        '500':
          description: Internal server error
  /category/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the category
        required: true
        schema:
          type: string
    get:
      tags:
        - category
      description: Get a category by id from the database
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
    delete:
      tags:
        - category
      description: Delete a category by id
      responses:
        '204':
          description: Success
        '500':
          description: Internal server error
  /category/name/{name}:
    parameters:
      - name: name
        in: path
        description: Name of the category
        required: true
        schema:
          type: string
    get:
      tags:
        - category
      description: Get a category by name from the database
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
    delete:
      tags:
        - category
      description: Delete a category by name
      responses:
        '204':
          description: Success
        '500':
          description: Internal server error
  /category/count/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the category
        required: true
        schema:
          type: string
    get:
      tags:
        - category
      description: Get a category by id from the database and send count of products
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/Category'
                  count:
                    type: integer
                    example: 4
        '500':
          description: Internal server error
  /category/count/name/{name}:
    parameters:
      - name: name
        in: path
        description: Name of the category
        required: true
        schema:
          type: string
    get:
      tags:
        - category
      description: Get a category by name from the database and send count of products
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    $ref: '#/components/schemas/Category'
                  count:
                    type: integer
                    example: 4
        '500':
          description: Internal server error
  /article:
    get:
      description: Get all articles from the database
      tags:
        - article
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: 'Error: Article category does not exist.'
        '500':
          description: Internal server error
    post:
      description: Create article(s) in the database
      tags:
        - article
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Article'
        required: true
      responses:
        '201':
          description: Article(s) created
        '400':
          description: Error creating article
        '500':
          description: Internal server error
  /article/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the article
        required: true
        schema:
          type: string
    get:
      tags:
        - article
      description: Get an article by id from the database
      parameters:
        - name: id
          in: path
          description: ID of the article
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '500':
          description: Internal server error
    delete:
      tags:
        - article
      description: Delete an article by id from the database
      parameters:
        - name: id
          in: path
          description: ID of the article
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Article deleted
        '500':
          description: Internal server error
  /stock:
    post:
      description: Create new stocks
      tags:
        - stock
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Stock'
        required: true
      responses:
        '201':
          description: Success
        '400':
          description: 'Error : Invalid request body.'
        '500':
          description: Internal server error
    delete:
      description: Delete all stocks
      tags:
        - stock
      responses:
        '204':
          description: Success
        '500':
          description: Internal server error
    get:
      description: Get all stocks
      tags:
        - stock
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
        '500':
          description: Internal server error
  /stock/{articleId}:
    parameters:
      - name: articleId
        in: path
        description: ID of the article
        required: true
        schema:
          type: string
    get:
      description: Get stocks by articleId
      tags:
        - stock
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
        '400':
          description: Error fetching stock
        '500':
          description: Internal server error
    put:
      description: Update stock by articleId
      tags:
        - stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
        required: true
      responses:
        '200':
          description: Success
        '400':
          description: Error modifying stock
        '500':
          description: Internal server error
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          example: 034ce5ee-e635-4cba-90cf-6bbb175c2a8a
        name:
          type: string
          example: category1FE3434a
        articles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 176bc3d3-552f-4981-8d98-95b6c4cd944c
              description:
                type: string
                example: T-shirt bleu
              categoryId:
                type: string
                example: 034ce5ee-e635-4cba-90cf-6bbb175c2a8a
              price:
                type: number
                example: 4
      xml:
        name: category
    Article:
      type: object
      properties:
        description:
          type: string
        price:
          type: number
        category:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
      xml:
        name: article
    Stock:
      type: object
      properties:
        articleId:
          type: string
          example: 176bc3d3-552f-4981-8d98-95b6c4cd944c
        count:
          type: integer
          example: 4
        size:
          type: string
          enum:
            - S
            - M
            - L
            - XL
      xml:
        name: stock
